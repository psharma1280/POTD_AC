class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n=nums.size();

        // TLE OCCURS:-
        // vector<int>vec;
        // for(int i=0;i<n;i++)
        // {
        //     int ans=1;
        //     for(int j=0;j<n;j++)
        //     {
        //         if(i==j)
        //         continue;
        //         else
        //         ans*=nums[j];
        //     }
        //     vec.push_back(ans);
        // }
        // return vec;

        // optimal approach
        vector<int>leftpro(n,1);
        vector<int>rightpro(n,1);
        leftpro[0]=1;
        rightpro[n-1]=1;

        // calculating only left multiplication
        for(int i=1;i<n;i++)
        {
            leftpro[i]=leftpro[i-1]*nums[i-1];
        }
        // calculating only right multiplication
        for(int i=n-2;i>=0;i--)
        {
            rightpro[i]=rightpro[i+1]*nums[i+1];
        }
        // resultant calculation
        vector<int>result(n,1);
        for(int i=0;i<n;i++)
        {
            result[i]=leftpro[i]*rightpro[i];
        }
        return result;


        
    }
};